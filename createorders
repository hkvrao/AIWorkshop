<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Café Control — Live Orders Dashboard</title>
  <!-- Tailwind CSS CDN -->
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            coffee: {
              50: '#f8f5f2',
              100: '#efe8e1',
              200: '#e0d0c2',
              300: '#c8ab93',
              400: '#b38b6d',
              500: '#9c6a45',
              600: '#845635',
              700: '#6a472d',
              800: '#523827',
              900: '#3b271b'
            }
          },
          boxShadow: {
            soft: '0 10px 25px -10px rgba(0,0,0,0.25)'
          }
        }
      }
    }
  </script>
  <style>
    /* Smooth scrolling for better UX */
    html { scroll-behavior: smooth; }
  </style>
</head>
<body class="min-h-screen bg-coffee-50 text-coffee-900">
  <!-- App Shell -->
  <header class="sticky top-0 z-40 backdrop-blur supports-[backdrop-filter]:bg-white/70 bg-white/90 border-b border-coffee-200">
    <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-4 flex items-center gap-4">
      <div class="flex items-center gap-3">
        <div class="w-10 h-10 rounded-xl bg-coffee-800 text-white grid place-content-center text-xl shadow-soft">☕</div>
        <div>
          <h1 class="text-xl sm:text-2xl font-semibold tracking-tight">Café Control</h1>
          <p class="text-xs text-coffee-600 -mt-1">Live Orders & Operations Dashboard</p>
        </div>
      </div>
      
      <!-- Controls -->
      <div class="ml-auto flex flex-wrap items-center gap-2 sm:gap-3">
        <button id="addDemoOrdersBtn" class="px-3 sm:px-4 py-2 rounded-xl bg-coffee-700 text-white hover:bg-coffee-800 active:scale-[.98] transition shadow-soft">Add Demo Orders</button>
        <div class="flex items-center gap-2 bg-white rounded-xl border border-coffee-200 px-3 py-2">
          <label for="autoRefresh" class="text-sm text-coffee-700">Auto-Refresh</label>
          <select id="autoRefresh" class="bg-transparent text-sm outline-none">
            <option value="off">Off</option>
            <option value="5">5s</option>
            <option value="10">10s</option>
            <option value="30">30s</option>
            <option value="60">60s</option>
          </select>
        </div>
        <div class="flex items-center gap-2 bg-white rounded-xl border border-coffee-200 px-3 py-2">
          <label for="sortBy" class="text-sm text-coffee-700">Sort</label>
          <select id="sortBy" class="bg-transparent text-sm outline-none">
            <option value="time">Newest</option>
            <option value="oldest">Oldest</option>
            <option value="status">Status</option>
            <option value="value">Order Value</option>
          </select>
        </div>
        <div class="hidden sm:flex items-center gap-2 bg-white rounded-xl border border-coffee-200 px-3 py-2">
          <label for="filterStatus" class="text-sm text-coffee-700">Filter</label>
          <select id="filterStatus" class="bg-transparent text-sm outline-none">
            <option value="all">All</option>
            <option value="waiting">Waiting</option>
            <option value="in_progress">In Progress</option>
            <option value="ready">Ready</option>
            <option value="cancelled">Cancelled</option>
          </select>
        </div>
      </div>
    </div>
  </header>

  <!-- Summary Bar -->
  <section class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 mt-6">
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
      <div class="bg-white rounded-2xl p-4 border border-coffee-200 shadow-soft">
        <div class="text-sm text-coffee-600">Total Orders</div>
        <div id="totalOrders" class="text-3xl font-semibold mt-1">0</div>
      </div>
      <div class="bg-white rounded-2xl p-4 border border-coffee-200 shadow-soft">
        <div class="text-sm text-coffee-600">Ready</div>
        <div class="flex items-end gap-2">
          <div id="readyCount" class="text-3xl font-semibold mt-1">0</div>
          <div class="text-sm text-coffee-500">/ <span id="pendingCount">0</span> pending</div>
        </div>
      </div>
      <div class="bg-white rounded-2xl p-4 border border-coffee-200 shadow-soft">
        <div class="text-sm text-coffee-600">Total Revenue (Today)</div>
        <div id="totalRevenue" class="text-3xl font-semibold mt-1">₹0.00</div>
      </div>
      <div class="bg-white rounded-2xl p-4 border border-coffee-200 shadow-soft">
        <div class="text-sm text-coffee-600">Average Wait</div>
        <div id="avgWait" class="text-3xl font-semibold mt-1">0m</div>
      </div>
    </div>
  </section>

  <!-- Main Grid -->
  <main class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 mt-6 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-5" id="ordersGrid">
    <!-- Order cards render here -->
  </main>

  <!-- Side Panels -->
  <section class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 mt-6 grid grid-cols-1 lg:grid-cols-2 gap-5 pb-24">
    <div class="bg-white rounded-2xl p-4 border border-coffee-200 shadow-soft">
      <div class="flex items-center justify-between">
        <h2 class="text-lg font-semibold">Alerts Panel</h2>
        <span id="alertsCount" class="text-xs px-2 py-1 rounded-full bg-coffee-100 text-coffee-800">0</span>
      </div>
      <ul id="alertsList" class="mt-3 space-y-2 text-sm"></ul>
    </div>

    <div class="bg-white rounded-2xl p-4 border border-coffee-200 shadow-soft">
      <div class="flex items-center justify-between">
        <h2 class="text-lg font-semibold">Smart Assistant</h2>
        <button id="refreshSuggestions" class="text-sm px-3 py-1.5 rounded-lg bg-coffee-700 text-white hover:bg-coffee-800">Refresh</button>
      </div>
      <ul id="suggestions" class="mt-3 space-y-2 text-sm"></ul>
    </div>
  </section>

  <!-- Footer -->
  <footer class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 pb-8 text-center text-xs text-coffee-500">
    Built with ❤️ for café managers. Single-file, vanilla JS + Tailwind.
  </footer>

  <template id="orderCardTemplate">
    <article class="order-card bg-white rounded-2xl border border-coffee-200 shadow-soft p-4 flex flex-col gap-3">
      <div class="flex items-start justify-between gap-2">
        <div>
          <h3 class="font-semibold text-lg leading-tight"><span class="customer-name"></span> <span class="text-coffee-400 text-sm font-normal">#<span class="order-id"></span></span></h3>
          <div class="text-xs text-coffee-600"><span class="timestamp"></span> • <span class="wait-time"></span> wait</div>
        </div>
        <div class="flex items-center gap-2">
          <span class="status-pill text-xs px-2 py-1 rounded-full bg-coffee-100 text-coffee-800">waiting</span>
        </div>
      </div>
      
      <ul class="items-list text-sm space-y-1"></ul>

      <div class="grid grid-cols-2 gap-2 text-sm">
        <div class="bg-coffee-50 rounded-xl px-3 py-2 border border-coffee-100">Payment: <span class="payment"></span></div>
        <div class="bg-coffee-50 rounded-xl px-3 py-2 border border-coffee-100">Value: <span class="value font-medium"></span></div>
      </div>

      <div class="flex items-center gap-2 mt-auto">
        <select class="status-select flex-1 bg-white border border-coffee-200 rounded-xl px-3 py-2 text-sm outline-none">
          <option value="waiting">Waiting</option>
          <option value="in_progress">In Progress</option>
          <option value="ready">Ready</option>
          <option value="cancelled">Cancelled</option>
        </select>
        <button class="btn-cancel px-3 py-2 rounded-xl bg-red-600 text-white text-sm hover:bg-red-700">Cancel</button>
      </div>
    </article>
  </template>

  <script>
    /*************************
     * Data & Utilities
     *************************/
    const menu = {
      drinks: {
        Espresso: 120, Latte: 180, Cappuccino: 170, Americano: 140, Mocha: 200,
        FlatWhite: 190, Macchiato: 160, ColdBrew: 210, MatchaLatte: 220
      },
      pastries: { Croissant: 90, Muffin: 80, Brownie: 110, Cheesecake: 150, Donut: 70 },
      snacks: { Sandwich: 160, Quiche: 170, Bagel: 90, GranolaBar: 60, Panini: 180 }
    };

    const paymentMethods = ['Cash', 'Card', 'UPI'];

    const STATUS = {
      WAITING: 'waiting',
      IN_PROGRESS: 'in_progress',
      READY: 'ready',
      CANCELLED: 'cancelled'
    };

    /** Random helpers */
    const r = (n) => Math.floor(Math.random() * n);
    const pick = (arr) => arr[r(arr.length)];
    const formatINR = (n) => new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(n);
    const since = (ts) => {
      const ms = Date.now() - ts;
      const m = Math.floor(ms / 60000);
      const s = Math.floor((ms % 60000) / 1000);
      return m > 0 ? `${m}m ${s}s` : `${s}s`;
    };

    /** In-memory store with localStorage persistence */
    const Store = {
      key: 'cafe-control-v1',
      load() {
        try { return JSON.parse(localStorage.getItem(this.key)) || []; } catch { return []; }
      },
      save(data) { localStorage.setItem(this.key, JSON.stringify(data)); }
    };

    let orders = Store.load();
    let nextId = orders.reduce((m, o) => Math.max(m, o.id), 1000) + 1;

    function newDemoOrder() {
      const firstNames = ['Aarav','Asha','Kabir','Diya','Ishan','Maya','Ravi','Priya','Vikram','Nia','Rohan','Anaya'];
      const customer = pick(firstNames) + ' ' + String.fromCharCode(65 + r(26)) + '.';
      const items = [];
      const itemCount = 1 + r(5); // 1-5 items
      for (let i = 0; i < itemCount; i++) {
        const cat = pick(Object.keys(menu));
        const name = pick(Object.keys(menu[cat]));
        items.push({ name, category: cat, price: menu[cat][name], qty: 1 + (Math.random()<0.2?1:0) });
      }
      const status = STATUS.WAITING;
      const payment = pick(paymentMethods);
      const createdAt = Date.now() - r(12) * 60 * 1000; // up to 12 min ago
      const id = nextId++;
      return { id, customer, items, status, payment, createdAt, updatedAt: createdAt, cancelled: false };
    }

    function computeValue(order) {
      return order.items.reduce((sum, it) => sum + it.price * it.qty, 0);
    }

    function filteredSortedOrders() {
      const statusFilter = document.getElementById('filterStatus').value;
      const sortBy = document.getElementById('sortBy').value;
      let list = orders.filter(o => statusFilter === 'all' ? true : o.status === statusFilter);
      switch (sortBy) {
        case 'time':
          list.sort((a,b) => b.createdAt - a.createdAt); break;
        case 'oldest':
          list.sort((a,b) => a.createdAt - b.createdAt); break;
        case 'status':
          const rank = { waiting:1, in_progress:2, ready:3, cancelled:4 };
          list.sort((a,b) => rank[a.status]-rank[b.status] || a.createdAt-b.createdAt); break;
        case 'value':
          list.sort((a,b) => computeValue(b) - computeValue(a)); break;
      }
      return list;
    }

    /*************************
     * Rendering
     *************************/
    const grid = document.getElementById('ordersGrid');
    const tpl = document.getElementById('orderCardTemplate');

    function statusToDisplay(status) {
      switch(status){
        case STATUS.WAITING: return {text:'Waiting', cls:'bg-yellow-100 text-yellow-900'};
        case STATUS.IN_PROGRESS: return {text:'In Progress', cls:'bg-blue-100 text-blue-900'};
        case STATUS.READY: return {text:'Ready', cls:'bg-emerald-100 text-emerald-900'};
        case STATUS.CANCELLED: return {text:'Cancelled', cls:'bg-red-100 text-red-900'};
      }
    }

    function render() {
      // Summary
      const total = orders.length;
      const ready = orders.filter(o => o.status === STATUS.READY).length;
      const pending = orders.filter(o => o.status !== STATUS.READY && o.status !== STATUS.CANCELLED).length;
      const revenue = orders
        .filter(o => o.status !== STATUS.CANCELLED)
        .reduce((sum, o) => sum + computeValue(o), 0);
      const waits = orders.map(o => Math.max(0, Math.floor((Date.now() - o.createdAt)/60000)));
      const avgWait = waits.length ? Math.round(waits.reduce((a,b)=>a+b,0)/waits.length) : 0;

      document.getElementById('totalOrders').textContent = total;
      document.getElementById('readyCount').textContent = ready;
      document.getElementById('pendingCount').textContent = pending;
      document.getElementById('totalRevenue').textContent = formatINR(revenue);
      document.getElementById('avgWait').textContent = `${avgWait}m`;

      // Grid
      grid.innerHTML = '';
      for (const order of filteredSortedOrders()) {
        const node = tpl.content.firstElementChild.cloneNode(true);
        node.querySelector('.order-id').textContent = order.id;
        node.querySelector('.customer-name').textContent = order.customer;
        node.querySelector('.timestamp').textContent = new Date(order.createdAt).toLocaleTimeString();
        node.querySelector('.wait-time').textContent = since(order.createdAt);
        node.querySelector('.payment').textContent = order.payment;
        node.querySelector('.value').textContent = formatINR(computeValue(order));
        // Items
        const ul = node.querySelector('.items-list');
        order.items.forEach(it => {
          const li = document.createElement('li');
          li.innerHTML = `<span class="font-medium">${it.name.replace(/([A-Z])/g,' $1').trim()}</span> · ${it.category} × ${it.qty} — ${formatINR(it.price*it.qty)}`;
          ul.appendChild(li);
        });
        // Status
        const s = statusToDisplay(order.status);
        const pill = node.querySelector('.status-pill');
        pill.textContent = s.text;
        pill.className = `status-pill text-xs px-2 py-1 rounded-full ${s.cls}`;
        const select = node.querySelector('.status-select');
        select.value = order.status;
        select.addEventListener('change', () => updateStatus(order.id, select.value));
        node.querySelector('.btn-cancel').addEventListener('click', () => cancelOrder(order.id));

        grid.appendChild(node);
      }

      renderAlerts();
      renderSuggestions();
      Store.save(orders);
    }

    /*************************
     * Alerts & Assistant
     *************************/
    function renderAlerts(){
      const ul = document.getElementById('alertsList');
      ul.innerHTML = '';
      let count = 0;
      const now = Date.now();
      for (const o of orders) {
        const ageMin = (now - o.createdAt) / 60000;
        const itemQty = o.items.reduce((s,it)=>s+it.qty,0);
        if (o.status === STATUS.CANCELLED) {
          addAlert(`Order #${o.id} cancelled by staff/customer.`, 'red'); count++;
        }
        if (o.status !== STATUS.READY && ageMin > 10) {
          addAlert(`Order #${o.id} waiting ${Math.round(ageMin)}m — consider expediting.`, 'yellow'); count++;
        }
        if (itemQty >= 6) {
          addAlert(`Order #${o.id} is a large group (${itemQty} items).`, 'blue'); count++;
        }
      }
      document.getElementById('alertsCount').textContent = count;

      function addAlert(text, color){
        const li = document.createElement('li');
        const colorMap = { red: 'bg-red-50 text-red-800 border-red-200', yellow: 'bg-yellow-50 text-yellow-900 border-yellow-200', blue: 'bg-blue-50 text-blue-900 border-blue-200' };
        li.className = `border rounded-xl px-3 py-2 ${colorMap[color]}`;
        li.textContent = text;
        ul.appendChild(li);
      }
    }

    function renderSuggestions(){
      const ul = document.getElementById('suggestions');
      ul.innerHTML = '';
      const openOrders = orders.filter(o => o.status !== STATUS.CANCELLED && o.status !== STATUS.READY);

      // Item frequency across open orders
      const freq = {};
      for (const o of openOrders) {
        for (const it of o.items) {
          freq[it.name] = (freq[it.name]||0) + it.qty;
        }
      }
      const top = Object.entries(freq).sort((a,b)=>b[1]-a[1]).slice(0,3);

      if (top.length) {
        const [first, second, third] = top;
        addSug(`Consider prepping more ${first[0].replace(/([A-Z])/g,' $1').trim()} — ${first[1]} in queue.`);
        if (second) addSug(`High demand: ${second[0].replace(/([A-Z])/g,' $1').trim()} (${second[1]} orders).`);
        if (third) addSug(`Also trending: ${third[0].replace(/([A-Z])/g,' $1').trim()}.`);
      } else {
        addSug('Quiet moment — use time for station tidy-up and restocking.');
      }

      // Throughput suggestion
      const waiting = orders.filter(o => o.status === STATUS.WAITING).length;
      const inprog = orders.filter(o => o.status === STATUS.IN_PROGRESS).length;
      if (waiting > inprog * 2) {
        addSug('Queue building: assign an extra barista to start orders.');
      }

      // Age-based suggestion
      const aged = orders.filter(o => Date.now()-o.createdAt > 12*60000 && o.status !== STATUS.READY && o.status !== STATUS.CANCELLED).length;
      if (aged > 0) {
        addSug(`There ${aged===1?'is':'are'} ${aged} order${aged===1?'':'s'} waiting > 12 min — prioritize these.`);
      }

      function addSug(text){
        const li = document.createElement('li');
        li.className = 'border border-coffee-200 rounded-xl px-3 py-2 bg-coffee-50';
        li.textContent = text;
        ul.appendChild(li);
      }
    }

    /*************************
     * Mutations
     *************************/
    function addDemoOrders(n=3){
      for (let i=0;i<n;i++) orders.push(newDemoOrder());
      render();
    }

    function updateStatus(id, status){
      const o = orders.find(x=>x.id===id);
      if (!o) return;
      o.status = status;
      o.updatedAt = Date.now();
      if (status === STATUS.CANCELLED) o.cancelled = true;
      render();
    }

    function cancelOrder(id){ updateStatus(id, STATUS.CANCELLED); }

    /*************************
     * Auto Refresh / Auto-Progress
     *************************/
    let autoTimer = null;

    function setAutoRefresh(seconds){
      if (autoTimer) { clearInterval(autoTimer); autoTimer = null; }
      if (!seconds || seconds === 'off') return;
      autoTimer = setInterval(() => {
        autoProgress();
        render();
      }, Number(seconds) * 1000);
    }

    function autoProgress(){
      // lightweight simulation: some waiting -> in progress, some in progress -> ready
      const now = Date.now();
      for (const o of orders) {
        const age = (now - o.createdAt) / 60000; // minutes
        if (o.status === STATUS.WAITING && (age > 3 || Math.random() < 0.25)) {
          o.status = STATUS.IN_PROGRESS; o.updatedAt = now;
        } else if (o.status === STATUS.IN_PROGRESS && (age > 6 || Math.random() < 0.20)) {
          o.status = STATUS.READY; o.updatedAt = now;
        }
      }
    }

    /*************************
     * Event Wiring
     *************************/
    document.getElementById('addDemoOrdersBtn').addEventListener('click', () => addDemoOrders(3 + r(3)));
    document.getElementById('autoRefresh').addEventListener('change', (e)=> setAutoRefresh(e.target.value));
    document.getElementById('sortBy').addEventListener('change', render);
    document.getElementById('filterStatus').addEventListener('change', render);
    document.getElementById('refreshSuggestions').addEventListener('click', renderSuggestions);

    // Keyboard: press "N" to add a quick order
    document.addEventListener('keydown', (e)=>{ if (e.key.toLowerCase()==='n') addDemoOrders(1); });

    /*************************
     * Boot
     *************************/
    if (orders.length === 0) addDemoOrders(6);
    render();
  </script>
</body>
</html>
